{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Flaviu\\\\Desktop\\\\Movies\\\\movie-app\\\\src\\\\components\\\\row\\\\Row.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport movieTrailer from 'movie-trailer';\nimport YouTube from 'react-youtube';\nimport './row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Row = _ref => {\n  _s();\n\n  let {\n    title,\n    fetchUrl\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false); // const url = 'https://api.themoviedb.org/3/movie/popular?api_key=49e800de027955c63868eb9e24ba6ba9'\n\n  const imgUrl = `https://image.tmdb.org/t/p/original`;\n\n  const fetchData = async () => {\n    const request = await fetch(fetchUrl);\n\n    if (request.status === 200) {\n      const movies = await request.json();\n      setMovies(movies.results);\n      console.log(movies.results);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleClick = movie => {\n    setIsPlaying(true);\n    console.log(movie);\n\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    },\n    isPlaying\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"row-popular title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"row-img\",\n          src: `${imgUrl}${movie.poster_path}`,\n          alt: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item__overlay\",\n          onClick: () => handleClick(movie),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"movie-title\",\n            \"aria-hidden\": \"true\",\n            children: movie.title || movie.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item__body\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Popularity : \", movie.popularity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Average votes : \", movie.vote_average]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Release Date : \", movie.release_date || movie.first_air_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"yt-wrapper\",\n      children: [trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        className: \"ytvideo\",\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-yt-video\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Row, \"9m20TIagvIUlq5/iW8MwSTP8XaY=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Flaviu/Desktop/Movies/movie-app/src/components/row/Row.jsx"],"names":["React","useEffect","useState","movieTrailer","YouTube","Row","title","fetchUrl","movies","setMovies","trailerUrl","setTrailerUrl","isPlaying","setIsPlaying","imgUrl","fetchData","request","fetch","status","json","results","console","log","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","get","catch","error","opts","height","width","playerVars","autoplay","map","poster_path","name","popularity","vote_average","release_date","first_air_date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from \"react\";\nimport movieTrailer from 'movie-trailer';\nimport YouTube from 'react-youtube';\nimport './row.css';\n\nconst Row = ({ title, fetchUrl }) => {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState('');\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    // const url = 'https://api.themoviedb.org/3/movie/popular?api_key=49e800de027955c63868eb9e24ba6ba9'\n    const imgUrl = `https://image.tmdb.org/t/p/original`\n    \n    const fetchData = async () => {\n        const request = await fetch(fetchUrl);\n        if(request.status === 200){\n            const movies = await request.json();\n            setMovies(movies.results);\n            console.log(movies.results)\n        }\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const handleClick = (movie) => {\n        setIsPlaying(true);\n        console.log(movie)\n        if (trailerUrl) {\n          setTrailerUrl(\"\");\n        } else {\n          movieTrailer(movie?.title || \"\")\n            .then((url) => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParams.get(\"v\"));\n            })\n            .catch((error) => console.log(error));\n        }\n      };\n\n      const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n          autoplay: 1,\n        },\n        isPlaying\n      };\n\n    return (\n        <div className=\"row\">\n            <h1 className=\"row-popular title\">{title}</h1>\n            <div className=\"row-posters\"> \n                {movies.map((movie) => \n                <div className=\"item\">\n                  <img className=\"row-img\" src={`${imgUrl}${movie.poster_path}`} alt={movie.title} />\n                  <div className=\"item__overlay\" onClick={()=> handleClick(movie)}>\n                    <h3 id=\"movie-title\" aria-hidden=\"true\">{movie.title || movie.name}</h3>\n                    <div className=\"item__body\">\n                      <p>Popularity : {movie.popularity}</p>\n                      <p>Average votes : {movie.vote_average}</p>\n                      <p>Release Date : {movie.release_date || movie.first_air_date}</p>\n                    </div>\n                  </div>\n                </div>\n                )}\n            </div>\n            <div className=\"yt-wrapper\">\n              {trailerUrl && <YouTube className=\"ytvideo\" videoId={trailerUrl} opts={opts} />}\n              <button className=\"close-yt-video\">Close</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}